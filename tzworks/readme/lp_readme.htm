<html>

<head>
    <title>lp readme</title>
    <style type="text/css">
        div
        {
            margin-left: 1em;
        }
    </style>
</head>

<body bgcolor="white"">

<h2 align="center"><a name="index">Windows LNK Parsing Utility - <i>lp</i></a></h2>
<h3 align="center">(version 0.62)<br /><br /></h3>
<!--WARNING_TAG-->
<hr />

<ul>
    <li> <a href="#eula"> End User's License Agreement (EULA) </a></li>

    <li> <a href="#about"> About the <b><i>lp</i></b> Tool </a></li>
    <li> <a href="#shllink">SHLLINK Metadata and what <b><i>lp</i></b> Extracts</a></li>
    <li> <a href="#howto">How to use this Tool</a>
    <ol>
        <li><a href="#case1">Parsing an Individual Shortcut File </a></li>
        <li><a href="#case2">Parsing a Captured Image for SHLLINK Metadata</a></li>
        <li><a href="#case3">Parsing Automatic and Custom Destinations Files Used for Jump Lists </a></li>
        <li><a href="#case4">Parsing a Collection of Files</a></li>
        <li><a href="#case5">Parsing an Active Volume [Experimental Option]</a></li>
        <li><a href="#case6">Parsing a VMWare Volume [Experimental Option]</a></li>
    </ol></li>
    <li> <a href="#dissecting_output">Dissecting the output fields</a></li>
    <li> <a href="#issues">Known Issues</a></li>
    <li> <a href="#options">List of options</a></li>
    <li> <a href="#auth"> Authentication and License File </a></li>
    <li> <a href="#version_history"> Version history </a></li>
    <li> <a href="#references"> References </a></li>
</ul>



<hr/><!---------------------EULA---------------------->
<h2><a name="eula">TZWorks Tools included in the SANS Investigative Forensic Toolkit (SIFT)</br>
END USER LICENSE AGREEMENT (EULA)</a></h2>

<h3>USER AGREEMENT</h3>
<div>
<p>Permission to use the TZWorks, LLC software and related documentation (&quot;Software&quot;) 
is for <b>Demonstration and Testing use ONLY</b>. The User Agreement, Disclaimer, and/or Software 
may change from time to time.  By continuing to use the Software after those changes become 
effective, you agree to be bound by all such changes.  Permission to use the Software is granted 
provided that (1) use of such Software is for <b>Demonstration and Testing use only</b> and 
(2) the Software is not resold, transferred or distributed to any other person or entity.  
<i><font color="red">To use the Software for commercial or business purposes, a separate 
license is required.</font></i> Contact TZWorks, LLC 
(<a href="mailto:info@tzworks.net">info&#64;tzworks.net</a>) 
for more information regarding licensing. To redistribute the Software, approval in writing 
is required from TZWorks, LLC.  These terms do not give the user any rights in intellectual 
property or technology, but only a limited right to use the Software for <b>Demostrations and 
Testing</b>.  TZWorks, LLC retains all rights to ownership of this Software.</p>
</div>

<h3>DISCLAIMER</h3>    
<div>
<p>The user agrees that this Software is experimental in nature and use of the Software is 
at user's sole risk.  The Software could include technical inaccuracies or errors.  Changes 
are periodically added to the information herein, and TZWorks, LLC may make improvements and/or 
changes to Software at any time.  TZWorks, LLC makes no representations about the accuracy or 
usability of the Software for any purpose.</p>

<p>ALL SOFTWARE ARE PROVIDED &quot;AS IS&quot; AND &quot;WHERE IS&quot; WITHOUT WARRANTY 
OF ANY KIND INCLUDING ALL IMPLIED WARRANTIES AND CONDITIONS OF MERCHANTABILITY, FITNESS 
FOR ANY PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT.  IN NO EVENT SHALL TZWORKS, LLC 
BE LIABLE FOR ANY KIND OF DAMAGE RESULTING FROM ANY CAUSE OR REASON, ARISING OUT OF IT 
IN CONNECTION WITH THE USE OR PERFORMANCE OF INFORMATION AVAILABLE FROM THIS SOFTWARE. </p>
</div>

<h3>REMOVAL</h3>
<div>
<p>The Software are the original works of TZWorks, LLC.  However, to be in compliance with 
the Digital Millennium Copyright Act of 1998 (&quot;DMCA&quot;) we agree to investigate and disable any 
material for infringement of copyright. Contact TZWorks, LLC at email address: 
<a href="mailto:info@tzworks.net">info&#64;tzworks.net</a>, regarding any DMCA concerns. </p>
</div>

<!-- 
This is section is commented out, since it is only used by the tool binary

USER_AGREEMENT_START
-------------------------------- User Agreement -----------------------------

Permission to use the TZWorks, LLC software and related documentation
("Software") is for Demonstration and Testing use ONLY. The User Agreement, 
Disclaimer, and/or Software may change from time to time.  By continuing to 
use the Software after those changes become effective, you agree to be 
bound by all such changes.  Permission to use the Software is granted 
provided that (1) use of such Software is for Demonstration and Testing use 
only and (2) the Software is not resold, transferred or distributed to any 
other person or entity.  To use the Software for commercial or business 
purposes, a separate license is required. Contact TZWorks, LLC 
(info@tzworks.net) for more information regarding licensing. To redistribute
the Software, approval in writing is required from TZWorks, LLC.  These 
terms do not give the user any rights in intellectual property or technology,
but only a limited right to use the Software for Demostrations and Testing.
TZWorks, LLC retains all rights to ownership of this Software.
USER_AGREEMENT_END

DISCLAIMER_START
---------------------------------- DISCLAIMER -------------------------------

The user agrees that all Software made available by TZWorks, LLC is
experimental in nature and use of the Software is at user's sole risk. The
Software could include technical inaccuracies or errors.  Changes are 
periodically added to the information herein, and TZWorks, LLC may make 
improvements and/or changes to Software and/or related documentation at any
time.  TZWorks, LLC makes no representations about the accuracy or usability
of the Software for any purpose.  All software are provided "AS IS" and 
"WHERE IS" without warranty of any kind including all implied warranties and
conditions of merchantability, fitness for any particular purpose, title and
non-infringement.  In no event shall TZWorks, LLC be liable for any kind of 
damage resulting from any cause or reason, arising out of it in connection
with the use or performance of information available from this Software.
DISCLAIMER_END
-->




<hr/><!---------------------About the <b><i>lp</i></b> Tool---------------------->
<h2><a name="about">About the <b><i>lp</i></b> Tool</a>
<font size="2"><a href="#index"> (top) </a></font></h2>

<div>
<p><b><i>lp</i></b> is a command line version of a Windows <i>SHLLINK</i> parser that was designed to 
operate on <i>shortcut</i> files, but can  parse <i>SHLLINK</i> artifacts from files that 
generate <i>Jump Lists</i> as well.   Originally inspired by the forensic class taken 
from the <i><a href="http://www.sans.org">SANS Institute</a></i> back in Jan 2010, 
<b><i>lp</i></b> is a useful tool for any computer forensic toolkit.</p>

<p>While <i>shortcut</i> files can reside in just about any directory, the primary location 
for many <i>shortcut</i> files is:  %APPDATA%\ Microsoft\ Windows\ Recent\ &lt;<i>shortcut</i> files&gt;, 
where the <i>%APPDATA%</i> is resolved to C:\Users\&lt;user account&gt;\AppData\Roaming.  This is 
where the operating system automatically creates a <i>shortcut</i> based on a user double 
clicking on an application to launch it.</p>

<p>Of interest to the forensic investigator is the metadata associated with 
this type of file, since they offer many useful artifacts when determining 
activity on a computer. Some of these artifacts include:</p>

<ul>
    <li>The path to the target file/directory it references along with 
   modify/access/create timestamps </li>
    <li>The size of the target when it was last accessed. </li>
    <li>Serial number of the volume where the target was stored.</li>
    <li>Network volume share name (if applicable). </li>
    <li>Target attributes, such as whether it was 'read only', 
    'hidden', 'system', etc. </li>
    <li>One of the MAC addresses associated with the host computer 
    (available when an Object ID is present). </li>
</ul>

<p>When trying to parse out the above artifacts, one can turn to the 
Microsoft open specification agreement, where there is a published version 
of the <a href="http://msdn.microsoft.com/en-us/library/dd871305">Windows <i>SHLLINK</i> format</a>.   
From this specification, one can see many of the details needed to understand 
the structures of the format.</p>

<p>The parsing engine of <b><i>lp</i></b> makes use of the Microsoft 
specification to extract much of the <i>shortcut</i> internals.   Where the 
specification lacked details, we ended up using empirical data to help understand 
some of the opaque data structure types allowing us to parse the <i>SHLLINK</i> 
format more fully.  </p>

<p>To use this tool, an authentication file is required to be in the same 
directory as the binary for the tool to run.  The non-commercial/demonstrational-use 
EULA is part of this readme. It only activates certain capabilities of the 
tool and is meant only for demonstration purposes.  This authentication will 
eventually expire.  To activate all the functionality of the tool and use 
it on a permanent basis, a separate business license needs to be purchased. 
Contact <a href="mailto:info@tzworks.net">info&#64;tzworks.net</a> for more 
details about the using this tool for business and/or casework use.</p>
</div>

<hr/><!---------------------SHLLINK Metadata and what <b><i>lp</i></b> Extracts---------------------->
<h2><a name="shllink"><i>SHLLINK</i> Metadata and what <b><i>lp</i></b> Extracts</a>
<font size="2"><a href="#index"> (top) </a></font></h2>

<div>
<p>When creating tools that parse artifacts that still have unknowns associated 
with them, there is a balance on what data should be presented to the user and 
which should not.  On one hand, we at <i>TZWorks LLC</i> personally like to see 
all the data artifacts, complete with file offsets, so we can trace each artifact 
in a hex editor.    This allows one to hand carve the data and is very important 
to the reverser.  However, this type of data is most likely to be too noisy for 
the normal user.   Internally at <i>TZWorks</i> we create a <i>do everything</i> version 
and a <i>limited version</i>.  Up till now we have not been labeling the <i>limited 
versions</i> as such.   Therefore, starting with version 0.49, <b><i>lp</i></b> is labeled as 
<i>limited</i>.</p>

<p>The <i>limited version</i> has all the same functionality of the previous versions plus 
more.  The <i>limited version</i> binary, however, is not compiled with some extra options 
used for pulling out additional information from <i>SHLLINK</i> metadata, primarily useful 
to reversing and testing the integrity of the <i>shortcut</i> file.   Aside from these 
extra options, the <i>limited version</i> includes much more capabilities than the previous 
versions.  Some of these additional options include: (a) carving <i>SHLLINK</i> metadata 
from images and live volumes, (b) handling the nuances of the <i>Destinations</i> files 
used in the <i>Jump Lists</i> and (c) additional output format options.</p>

<p>When analyzing <b><i>lp</i></b>'s output, a number of timestamp data is shown, including
the <i>shortcut</i> file timestamps as well as the target (what the <i>shortcut</i> file 
points to) timestamps.  The output should contain the size of the target, if it is 
a file vice a directory, and will contain a path to the target.   As part of the <i>SHLLINK</i>
specification, there is also what Microsoft calls a <i>TrackerDataBlock</i>.  This is what we refer
to as the object identifier (ID), since it is really the object ID of the NTFS MFT record 
associated with the target file or directory.</p>

<p>The object ID is another way to reference the target file/directory and ultimately allows 
the operating system a straight forward way to 'track' the target file or directory at 
the lower level NTFS object ID/MFT entry level.  
This object ID is part of the target file and moves where the target moves.  In the 
<i>SHLLINK</i> metadata there are two object IDs: (a) one that is recorded when the shortcut is 
created, and (b) one that is the current one.   For the most part these two object IDs are 
the same and will only differ in certain conditions.  Internally, <b><i>lp</i></b> makes note of both 
object IDs, however, it will only display both if they are different.</p>

<p>Associated with the object ID is a creation timestamp and media access control (MAC) network 
interface identifier that was present during the object ID creation.  The format of the object 
ID follows the Type 1 specification outlined in RFC 4122 (Universally Unique Identifier URN Namespace).  
Using this specification, one can extract the object time and MAC address from the object 
ID itself.  What this means is there is NO timestamp or MAC network interface artifact 
explicitly present in the <i>SHLLINK</i> metadata.  Any data shown in <b><i>lp</i></b>'s 
output for these fields is from implicitly deriving it from the object ID itself. 
</div>


<hr/><!---------------------How to use this Tool---------------------->
<h2><a name="howto">How to use this Tool</a>
<font size="2"><a href="#index"> (top) </a></font></h2>

<div>
<p>For starters, <b><i>lp</i></b> is a console application.  Therefore, to be able to access, and thus 
parse, <i>shortcut</i> files across all computer accounts, one will need to open the command prompt 
with administrator privileges first.  Without administrator privileges, one will be restricted 
to only accessing your account's <i>shortcut</i> files or those common to the operating system.</p>

<p>One can display the menu options by typing in the executable name with no parameters.  
By using the options in various ways, one can 
process <i>SHLLINK</i> metadata with six general 'use-cases':   (1) processing an individual 
<i>shortcut</i> file, (2) carving from a captured image, (3) extracting from <i>Jump List</i> files, 
(4) processing a collection of files, (5) carving from a live-mounted volume, and 
(6) carving from a <i>VMWare</i> volume.</p>

<p>For output options, there are four possible formats to choose from:  (1) default output, 
which is unstructured output.  This information is useful if not trying to parse the artifacts 
into a database. (2)  <font color="red">-csv</font> (comma separated value) option 
will render the output so that all the metadata is rendered with one record per line with 
each field separated with a comma.  The last two are: &nbsp; (3) &nbsp;<font color="red">-csvl2t</font> 
and (4) &nbsp;<font color="red">-bodyfile</font>.  Each will attempt to conform to either 
the <i>log2timeline</i> format or the <i>SleuthKit's body-file</i> format, as appropriate.   As shown 
in the menu above, these latter two options need to be validated by their respective 
sponsors.</p>

<p>Below is the menu with the various options.  Details of each option can be found 
<a href="#options">here</a>.</p>
<pre>
    lp (lnk parser) - full ver: 0.62; Copyright (c) TZWorks LLC

    Usage
     (note: options with ** are enabled with a commercial license)

      lp64 &lt;filename&gt;
      lp64 &lt;dd image&gt; -rawscan
      lp64 -partition &lt;drive letter&gt;         = ** mounted volume
      lp64 -vmdk "&lt;file1&gt; | &lt;file2&gt; | ..."   = ** VMWare image
      lp64 &lt;jmplist file&gt; -deepscan
        dir C:\Users\*.lnk /b /s | lp64 -pipe [-csv]
        dir "C:\Documents and Settings\*.lnk" /b /s | lp64 -pipe [-csv] 

    Basic options
      -csv                   = output is comma separated value format
      -csvl2t                = log2timeline output [needs validation]
      -bodyfile              = sleuthkit output [needs validation]
      -base10                = use base10 for file size instead of hexadecimal
      -pipe                  = ** pipe files into app for processing
      -username              &lt;name&gt; = output will contain this username
      -hostname              &lt;name&gt; = output will contain this hostname

    Additional options
      -rawscan               = ** scans file, carving LNK metadata
      -deepscan              = ** for JumpLists or packed LNK metadata
      -dateformat yyyy/mm/dd = ** "mm/dd/yyyy" is the default
      -timeformat hh:mm:ss   = ** "hh:mm:ss.xxx" is the default
      -no_whitespace         = ** only available for csv option
      -csv_separator "|"     = ** use a pipe char for csv separator
</pre>
</div>


<hr/><!---------------------Parsing an Individual Shortcut File---------------------->
<h2><a name="case1">Parsing an Individual Shortcut File</a>
<font size="2"><a href="#index"> (top) </a></font></h2>

<div>
<p><p>The most basic option is to parse an individual <i>shortcut</i> file.   To do so, 
just pass the name as the parameter to <b><i>lp</i></b>, as shown below, and the output 
will default to the long form.</p>
<pre>
        <b><i>lp</i></b> &lt;<i>shortcut</i> filename&gt;
</pre>
</div>


<hr/><!---------------------Parsing a Capture Image for <i>SHLLINK</i> metadata---------------------->
<h2><a name="case2">Parsing a Capture Image for <i>SHLLINK</i> metadata</a>
<font size="2"><a href="#index"> (top) </a></font></h2>

<div>
<p>To parse an entire image of a drive that is contained in a file (eg. a 'dd' type image), 
use the <font color="red">-rawscan</font> switch.   This  option tells <b><i>lp</i></b> 
to perform a full scan of any <i>SHLLINK</i> signatures found in the image.  For each 
signature found, <b><i>lp</i></b> will attempt to carve out any <i>SHLLINK</i> metadata.   
This type of scan will carve out signatures from allocated, unallocated or slack space.</p>

<p><b><i>lp</i></b> is able to scan very large files by reading a manageable chunk from 
the file at a time and output the results as they are generated.   So if your image is 
many gigabytes in size, <b><i>lp</i></b> should be able to process the entire image 
without using too much memory or system resources.  Of note, <b><i>lp</i></b> is 
agnostic as to the file system type, as it treats all formats the same.  While this 
is good news in that it can work on any file system, it is also bad, in that it does 
not try to reconstruct files from a fragmented system.  Empirical results show, however, 
that since the <i>SHLLINK</i> metadata is relatively small, the  
fragmentation of these files is close to nil.  Thus, this type of scanning/carving/parsing 
shows a high success rate in gathering the artifacts. </p>

<p>When parsing a large image, there will presumably be many <i>SHLLINK</i> entries 
carved out, thus it is recommended to: (a) use the <font color="red">-csv</font> 
option to place one record per line, and (b) redirect the output into a separate file.  
Below is an example:</p>
<pre>
        <b><i>lp</i></b>  c:\temp\dd_imagefile.bin -rawscan -csv &gt; results.csv
</pre>
</div>

<hr/><!---------------------Parsing Automatic and Custom Destinations files used for <i>Jump Lists</i>---------------------->
<h2><a name="case3">Parsing Automatic and Custom Destinations files used for <i>Jump Lists</i></a>
<font size="2"><a href="#index"> (top) </a></font></h2>

<div>
<p><i>Jump Lists</i> are a new feature, starting with Windows 7.  They are similar to shortcuts 
files in that they take one directly to the files that are used on a regular basis.   
They are different than the normal <i>shortcut</i> files in that they are more extensible in
what information they display.  For example, in Internet Explorer, the <i>Jump Lists</i> will 
display websites frequently visited; for Microsoft Office products like Excel, 
PowerPoint and Word, they will show most recently opened documents.</p>

<p>From a user's standpoint, <i>Jump Lists</i> increase one's productivity by providing quick 
access to the files and tasks associated with one's applications.   From a forensics 
standpoint, <i>Jump Lists</i> are a good indicator of which files were recently opened or 
which websites were visited frequently.</p>

<p>Windows derives the <i>Jump List</i> content from two sets of Destination files:</p>
<ul><font size="2">
    <li>%APPDATA%\Microsoft\Windows\Recent\AutomaticDestinations\[AppID].automaticDestinations-ms</li>
    <li>%APPDATA%\Microsoft\Windows\Recent\CustomDestinations\[AppID].customDestinations-ms</li>
</font></ul>

<p><i>%APPDATA%</i> is resolved to C:\Users\&lt;user account&gt;\AppData\Roaming. One can see that each 
user account (or profile) has its own set of <i>Destination</i> files.</p>

<p>For most <i>automaticDestinations</i> type files, <b><i>lp</i></b> can find and parse the <i>SHLLINK</i> metadata 
with no special command line options (eg.  the default settings).  This is because the 
<i>automaticDestinations</i> type files have a compound file signature, which is built into the 
<b><i>lp</i></b> scanning engine.  <b><i>lp</i></b> will recognize this signature, reconstruct the allocated/unallocated 
sectors within the compound file and scan the chunks appropriately.   On the other hand, 
the <i>customDestinations</i> type files only have <i>SHLLINK</i> signatures which do not necessarily 
occur on sector boundaries.   Therefore, to assist <b><i>lp</i></b>, to parse this type of file, one 
invokes the <font color="red">-deepscan</font> switch.   This tells <b><i>lp</i></b> to scan in a mode that is in-between a normal 
LNK file scan and a captured image type scan.   This switch has no effect on normal <i>shortcut</i> 
files, so it can be used to handle both <i>shortcut</i> files as well as <i>automatic/custom 
Destinations</i> files.</p>

<p>While <b><i>lp</i></b> does a good job at pulling out the <i>SHLLINK</i> metadata from both <i>automatic and custom 
Destinations</i> type files, it does not attempt to parse the MRU/MFU data from the <i>automatic 
Destinations</i> files.  To parse these files in a complete fashion, one can use the <b><i>jmp</i></b> tool 
from TZWorks LLC.  The <i><b>jmp</b></i> tool understands how to parse both <i>Destinations</i> type files 
in a manner to extract all pertinent metadata for the investigator.  </p>
</div>


<hr/><!---------------------Parsing a Collection of Files---------------------->
<h2><a name="case4">Parsing a Collection of Files</a>
<font size="2"><a href="#index"> (top) </a></font></h2>

<div>
<p>Sometimes one just wants to parse a bunch of <i>shortcut</i> files that are in a directory 
or a collection of subdirectories.   Compared to the partition scan discussed above, 
this option is much faster.  The disadvantage with is approach over the partition scan, 
is you don't get artifacts that have been deleted and are still in unallocated or slack 
space.</p>

<p>To use this option, one will make use of the operating systems ability to pipe data 
from one application's output to another application's input.   In this case, the 
source of the data will be the Windows shell command <i>dir</i>.  By adding some special
options to the <i>dir</i> command, one can output only the path/filename without any
extra data.  This result will be consumed by <b><i>lp</i></b>, and each path/filename
passed in will be analyzed.    
To invoke this behavior in <b><i>lp</i></b>, one will use the <font color="red">-pipe</font> switch
and use some special options in the dir command.</p>

<p> Below is an example of traversing the users directory and redirecting the output to 
a results file.  The first example is for pre-Vista machines the latter is for
Vista and later operating systems.</p>

<pre>
    dir "c:\documents and settings\*.lnk" /b /s | <b><i>lp</i></b> -pipe -csv &gt; results.csv

    dir c:\users\*.lnk /b /s | <b><i>lp</i></b> -pipe -csv &gt; results.csv
</pre>
</div>

<hr/><!---------------------Parsing an Active Volume---------------------->
<h2><a name="case5">Parsing an Active Volume</a>
<font size="2"><a href="#index"> (top) </a></font></h2>

<div>
<p>A variant of parsing a captured image is to parse an active Windows partition or a 
mounted volume on Linux.  The Windows version is invoked by using the 
<font color="red">-partition &lt;drive letter&gt;</font> option.
On Linux this is handled by passing in the device name of the disk 
and/or volume as the filename without the use of the 
<font color="red">-partition</font> keyword.
The other option that needs to be set is the 
<font color="red">-rawscan</font> switch.  
This option tells <b><i>lp</i></b> to read the specified volume at the sector level.  
While the <font color="red">-partition &lt;drive letter&gt;</font>
option implicitly invokes the <font color="red">-rawscan</font> 
option, for the Linux mode, one needs to explicitly call out this option.


<p>For <b><i>lp</i></b> to read at the cluster level, it needs to be invoked with 
<i>administrative </i> privileges.  Like the image file parsing, this option also is 
agnostic to file system type, as it treats all cluster data (from FAT16/32, exFat or 
NTFS) the same.  Below is an example of <b><i>lp</i></b> carving out <i>SHLLINK</i> 
signatures from a USB drive mounted as drive H for Windows and /dev/sbd1 on Linux.</p>
<pre>
        <b><i>lp</i></b> -partition H -csv &gt; results.csv          [Windows version]
        <b><i>lp</i></b> /dev/sdb1 -rawscan -csv &gt; results.csv    [Linux version]
</pre>

<p>To find where the drive is mounted on Linux or Mac, one can use 
the built-in tool <b><i>df</i></b> to enumerate what devices are used for the mount.  
While the <b><i>df</i></b> command is to display free disk space, it does this by 
displaying all the devices mounted followed by their statistics.  For 
the Mac OS-X case, one could also use the <b><i>diskutil list</i></b> to enumerate 
all drives and volumes mounted.</p>

<p>The Mac OS-X has an additional nuance in that one needs to specify 
<i>raw</i> I/O vice the standard <i>buffered</i> I/O.  So for the example above, if 
<i>/dev/sdb1</i> was specified as the device for the drive, then one would 
issue <i>/dev/<b><font color="red">r</font></b>sdb1</i>.</p>
</div>


<hr/><!---------------------Parsing a <i>VMWare</i> Volume---------------------->
<h2><a name="case6">Parsing a <i>VMWare</i> Volume</a>
<font size="2"><a href="#index"> (top) </a></font></h2>

<div>
<p>Occasionally it is useful to analyze a <i>VMWare</i> image, both from a forensics standpoint as 
well as from a testing standpoint.  When analyzing different operating systems, and different 
configurations, a virtual machine is extremely useful in testing out different boundary 
conditions.  This option is still considered experimental since it has only been tested on a 
handful of configurations.  Furthermore, this option is limited to monolithic type <i>VMWare</i> images 
versus split images.   In <i>VMWare</i>, the term split image means the volume is separated into 
multiple files, while the term monolithic virtual disk is defined to be a virtual disk where 
everything is kept in one file.  There may be more than one VMDK file in a monolithic 
architecture, where each monolithic VMDK file would represent a separate snapshot.  More 
information about the monolithic virtual disk architecture can be obtained from the 
<a href="http://www.vmware.com/"><i>VMWare</i> website</a>.</p>

<p>When working with virtual machines, the capability to handle snapshot images is important.  
Thus for processing a <i>VMWare</i> snapshot, one needs to include the parent snapshot/image as well as 
any descendants.</p>

<p><b><i>lp</i></b> can handle multiple VMDK files to accommodate a snapshot, and its descendants, by 
separating each VMDK filename with a pipe character and enclosing the expression in double quotes. For 
example:  <font color="red">-vmdk "&lt;<i>VMWare</i> NTFS virtual disk-1&gt; | ... | 
 &lt;<i>VMWare</i> NTFS virtual disk-x&gt;"</font>.  
Implicitly this option invokes the <font color="red">-rawscan</font> option as well, so that <b><i>lp</i></b> will scan each sector 
for <i>SHLLINK</i> signatures.  </p>

<p>To aid the user in defining the chain of descendant images, <b><i>lp</i></b> can take any VMDK file in 
a chain of snapshot VMDK files and determine what the descendant chain is.  <b><i>lp</i></b> will analyze 
the chain, and if incomplete, will suggest a chain to use.  This assumes, 
however, all the VMDK files are in the same directory.   </p>
</div>

<hr/><!---------------------Dissecting the output fields---------------------->
<h2><a name="dissecting_output">Dissecting the output fields</a>
<font size="2"><a href="#index"> (top) </a></font></h2>

<div>
<p>Depending on the data embedded into a link file the output will vary.  Below are a couple
of samples parsed from the SANS Forensics 408 Windows 8 exemplar image:</p>

<h4>Example of a more common LNK file's output</h4>

<p>The date fields "file modified/accessed/created" relate to the actual LNK file itself, while
the "target modified/accessed/created" relate to the target file the LNK refers to.  Therefore
when copying a LNK file from a target system to another system for offline analysis, this date will
reflect the date you created it on the offline system.   The Object ID is unique to the target
file and one can derive the creation of this object identifier from the actual object ID as 
well as the MAC address of the target system the object ID was created on.  
The fields for MFT Entry and Sequence number refer to the actual MFT (or inode) number of the target
file that the LNK refers to.  The ID List is usually a mix of class identifiers (eg. GUIDs) and named 
nodes, when combined together provide a path to the target file.  Embedded into this list are other
metadata that contain details about the target.  The other fields should be self explanatory.</p>

<pre>
   source path/filename:     c:\dump\testcases\win8.tests\Asgard.lnk
   file modified:            12/28/2013 20:37:48 [UTC]
   file accessed:            01/07/2014 15:21:54 [UTC]
   file created:             01/07/2014 15:21:54 [UTC]
   <font color="blue">MFT Entry:                0x2d2d4</font>                                &lt;-- references the target MFT entry
   <font color="blue">MFT Sequence#:            0x4</font>                                    &lt;-- references the target MFT entry
   Target flags:             HasLinkTargetIDList, HasLinkInfo, HasRelativePath, HasWorkingDir, IsUnicode, DisableKnownFolderAlias
   Target attributes:        FILE_ATTRIBUTE_ARCHIVE
   <font color="green">Target modified:          09/11/2013 16:19:56.420 [UTC]
   Target accessed:          09/11/2013 16:19:56.403 [UTC]
   Target created:           09/11/2013 16:18:15.661 [UTC]</font>
   <font color="blue">Target ObjID time:        09/04/2013 17:22:08.941 [UTC]</font>          &lt;-- derived from the Object ID below
   Parsed size:              0x000003e9 [1001 bytes]
   Target file size:         0x00009a2f [39471 bytes]
   Show cmd:                 [SW_SHOWNORMAL]
   <font color="red">ID List:                  {CLSID_UsersFiles}\AppData\Roaming\Microsoft\Signatures\Asgard.htm</font>
   Volume Type:              fixed
   Volume serial num:        7e58-aab0
   Volume label:             Windows8_OS
   Local base path:          C:\Users\Donald\AppData\Roaming\Microsoft\Signatures\Asgard.htm
   Relative path:            ..\..\Signatures\Asgard.htm
   Working directory:        C:\Users\Donald\AppData\Roaming\Microsoft\Signatures
   NETBIOS name:             bifrost
   Volume ID:                6bc0ab92-f111-496f-9067-ec5c94ffa9f5
   <font color="blue">Object ID:                87349aeb-1586-11e3-be7d-24fd52566ede</font>  &lt;-- unique to the target file this LNK file refers to
   <font color="blue">MAC address:              24:fd:52:56:6e:de</font>                     &lt;-- derived from the Object ID above
</pre>

<h4>Example of breaking out more metadata from the ID List</h4>
<p>For the 'full' version of the tool, the embedded ID List information is broken out. The
ID List usually contains DOS timestamps, which can be extracted as well. The timestamps shown
below, however, represent Windows FILETIME timestamps pulled from properties embedded into the 
each of the nodes that make up the ID List.  Other data besides timestamps can be found as well.  
If a portable device was part of the target path, one can sometimes extract the USB stats 
including serial number (ref: second example below).    Where these properties are used, 
<b><i>lp</i></b> will extract them and display the information, as shown below:</p>
<pre>
   <font color="red"><b>Case 1.</b></font> Showing additional timestamps ...
   source path/filename:     c:\dump\testcases\win8.tests\Camera Photos.lnk
   file modified:            12/28/2013 20:37:49 [UTC]
   file accessed:            01/07/2014 15:21:54 [UTC]
   file created:             01/07/2014 15:21:54 [UTC]
   Target flags:             HasLinkTargetIDList, HasLinkInfo, HasRelativePath, IsUnicode, DisableKnownFolderAlias
   Target attributes:        FILE_ATTRIBUTE_DIRECTORY
   Target modified:          10/17/2013 19:27:23.602 [UTC]
   Target accessed:          10/17/2013 19:27:23.602 [UTC]
   Target created:           10/17/2013 19:25:48.214 [UTC]
   Target ObjID time:        10/17/2013 21:03:21.428 [UTC]
   Parsed size:              0x00001268 [4712 bytes]
   Target file size:         0x00005000 [20480 bytes]
   Show cmd:                 [SW_SHOWNORMAL]
   <font color="blue">ID List:                  {CLSID_Libraries}\{CLSID_Pictures}\::{3ADD1653-EB32-4CB0-BBD7-DFA0ABB5ACCA}\iCloud Photos\Shared\Camera Photos
   Embedded ID List info:    
    [1] Path* : C:\Users\Donald\Pictures
    [2] Created : 08/10/2013 03:03:24.000 [UTC]
    [3] Modified : 10/17/2013 19:05:48.231 [UTC]
    [4] Name : Pictures
    [5] Path* : C:\Users\Donald\Pictures\iCloud Photos
    [6] Created : 10/17/2013 19:05:50.000 [UTC]
    [7] Modified : 10/17/2013 19:05:48.241 [UTC]
    [8] Accessed : 10/17/2013 19:05:50.000 [UTC]
    [9] Name : iCloud Photos
    [10] Path* : C:\Users\Donald\Pictures\iCloud Photos\Shared
    [11] Modified : 10/18/2013 01:38:50.358 [UTC]
    [12] Accessed : 10/18/2013 01:38:52.000 [UTC]
    [13] Name : Shared
    [14] Path* : C:\Users\Donald\Pictures\iCloud Photos\Shared\Camera Photos
    [15] Name : Camera Photos
    [16] Created : 10/17/2013 19:25:50.000 [UTC]
    [17] Modified : 10/17/2013 19:27:23.602 [UTC]
    [18] Accessed : 10/17/2013 19:27:24.000 [UTC]</font>
   Volume Type:              fixed
   Volume serial num:        7e58-aab0
   Volume label:             Windows8_OS
   Network name:             \\BIFROST\Users
   Local base path:          C:\Users\
   Common path:              Donald\Pictures\iCloud Photos\Shared\Camera Photos
   Relative path:            ..\..\..\..\..\Pictures\iCloud Photos\Shared\Camera Photos
   NETBIOS name:             bifrost
   Volume ID:                6bc0ab92-f111-496f-9067-ec5c94ffa9f5
   Object ID:                8dfc97c1-376f-11e3-be88-24fd52566ede

   <font color="red"><b>Case 2.</b></font> Showning other metadata, where a portable device was involved....
   source path/filename:     c:\dump\testcases\win8.tests\Documents.LNK
   file modified:            12/28/2013 20:37:49 [UTC]
   file accessed:            01/07/2014 15:21:54 [UTC]
   file created:             01/07/2014 15:21:54 [UTC]
   Target flags:             HasLinkTargetIDList, IsUnicode, DisableKnownFolderAlias
   Target attributes:        not specified
   Target modified:          not available
   Target accessed:          not available
   Target created:           not available
   Parsed size:              0x00000b98 [2968 bytes]
   Target file size:         0x00000000 [0 bytes]
   Show cmd:                 [SW_SHOWNORMAL]
   <font color="blue">ID List:                  {CLSID_MyComputer}\Donald's Windows Phone\Phone\Documents
   Embedded ID List info:    
    [1] \\?\usb#vid_0421&amp;pid_0661&amp;mi_00#6&amp;6d096df&amp;0&amp;0000#{6ac27878-a6fa-4155-ba85-f98f491d4f33}
    [2] {CLSID_PortableDevices}
    [3] SID-{10001,MTP Volume - 65537,31268536320}
    [4] Generic hierarchical
    [5] Serial# : MTP Volume - 65537
    [6] FuncObjId : s10001
    [7] UniqueId : SID-{10001,MTP Volume - 65537,31268536320}
    [8] {00010000-0514-0000-0000-000000000000}
    [9] ObjId : o1
    [10] UniqueId : {00010000-0514-0000-0000-000000000000}</font>
</pre>

<h4>Example of ID List embedded into a VistaAndAboveIDList</h4>
<p>For some LNK files, the ID List is stored within the VistaAndAboveIDList data block.
This, like the ID List example before, can have extra metadata which may provide additional
insight to the target file. In some cases, the data is just redundant.</p>
<pre>
   source path/filename:     c:\dump\testcases\win8.tests\DECISION MAKING CONTINGENCIES.lnk
   file modified:            12/28/2013 20:37:49 [UTC]
   file accessed:            01/07/2014 15:21:54 [UTC]
   file created:             01/07/2014 15:21:54 [UTC]
   Target flags:             HasLinkInfo, IsUnicode, HasExpString
   Target attributes:        FILE_ATTRIBUTE_ARCHIVE
   Target modified:          10/21/2013 19:46:54.626 [UTC]
   Target accessed:          10/21/2013 19:46:54.425 [UTC]
   Target created:           10/21/2013 19:46:54.425 [UTC]
   Target ObjID time:        10/20/2013 13:27:24.505 [UTC]
   Parsed size:              0x00000727 [1831 bytes]
   Target file size:         0x00025a00 [154112 bytes]
   Show cmd:                 [SW_SHOWNORMAL]
   Network name:             \\VALHALLA\USERS
   Common path:              Public\Documents\Articles\DECISION MAKING CONTINGENCIES.doc
   Environment DataBlk:      \\VALHALLA\Users\Public\Documents\Articles\DECISION MAKING CONTINGENCIES.doc
   NETBIOS name:             valhalla
   Volume ID:                3499381e-92d7-4236-9fc9-79e377f2430a
   <font color="blue">VistaAndAboveIDList:      {CLSID_ComputersAndDevices}\VALHALLA\Users\Public\Documents\Articles\DECISION MAKING CONTINGENCIES.doc
   VistaAndAboveIDList-info: 
    [1] \\VALHALLA\Users
    [2] Microsoft Network
    [3] @shell32.dll,-21816
    [4] @shell32.dll,-21801</font>
   Object ID:                5b3a9788-398b-11e3-be82-000af7048353
   MAC address:              00:0a:f7:04:83:53
</pre>

<h4>Example of a LNK file utilizing a PropertyStore Data Block</h4>
<p>In some cases, the LNK file will make use of what is called a 
Property Store Data Block.  This block encapsulates much metadata that
could be useful in an analysis.  For this example, this particular LNK file did not target a 
file with target dates or other metadata common to most LNK files.  In this case, most of the 
data was in the PropertyStoreDataBlk.
Below is an example:</p>
<pre>
   source path/filename:     c:\dump\testcases\win8.tests\com.amazon.kindle.lnk
   file modified:            12/28/2013 20:37:49 [UTC]
   file accessed:            01/07/2014 15:21:54 [UTC]
   file created:             01/07/2014 15:21:54 [UTC]
   Target flags:             IsUnicode
   Target attributes:        not specified
   Target modified:          not available
   Target accessed:          not available
   Target created:           not available
   Parsed size:              0x00000513 [1299 bytes]
   Target file size:         0x00000000 [0 bytes]
   Show cmd:                 [SW_SHOWNORMAL]
   <font color="blue">PropertyStoreDataBlk:    format guid/id [value] 
    [1] 9f4c2855-9f79-4b39-a8d0-e1d42de1d5f3/Family*      [AMZNMobileLLC.KindleforWindows8_stfe6vwa9jnbp]
    [2] 9f4c2855-9f79-4b39-a8d0-e1d42de1d5f3/Name*        [AMZNMobileLLC.KindleforWindows8_2.1.0.1_neutral__stfe6vwa9jnbp]
    [3] 9f4c2855-9f79-4b39-a8d0-e1d42de1d5f3/Id           [AMZNMobileLLC.KindleforWindows8_stfe6vwa9jnbp!com.amazon.kindle]
    [4] 9f4c2855-9f79-4b39-a8d0-e1d42de1d5f3/InstallPath* [C:\Program Files\WindowsApps\AMZNMobileLLC.KindleforWindows8_2.1.0.1_neutral__stfe6vwa9jnbp]
    [5] 86d40b4d-9069-443c-819a-2a54090dccec/Icon*        [images\logo\metro-regular-logo.png]
    [6] 86d40b4d-9069-443c-819a-2a54090dccec/Icon*        [images\logo\metro-small-logo.png]
    [7] 86d40b4d-9069-443c-819a-2a54090dccec/Icon*        [images\logo\metro-start-menu-wide.png]
    [8] 86d40b4d-9069-443c-819a-2a54090dccec/Type*        [Kindle]
    [9] b725f130-47ef-101a-a5f1-02608c9eebac/Name         [Kindle]
    [10] 841e4f90-ff59-4d16-8947-e81bbffab36d/Publisher*   [AMZN Mobile LLC]</font>
</pre>

</div>

<hr/><!---------------------Known Issues---------------------->
<h2><a name="issues">Known Issues</a>
<font size="2"><a href="#index"> (top) </a></font></h2>

<div>
<p><b><i>lp</i></b> doesn't parse some of the SHLLINK structures documented in the Microsoft 
specification.  As time permits, future versions will incorporate incremental capabilities to 
handle these structures.</p>

<p>For csv (comma separated values) output, there are restrictions in the characters that 
are outputted. Since commas are used as a separator, any data that had comma in its name 
are changed to semicolons. For the default (non-csv) output no changes are made to the 
data.</p>

<p>For carving options from an image or a volume, <b><i>lp</i></b> can encounter boundary conditions 
that we did not experience during our testing phase.  For these cases, <b><i>lp</i></b> will most likely 
crash.  As we discover new untested boundary conditions new updates will be rolled out.</p>

<p>For Linux and Mac builds of <b><i>lp</i></b>, the <i>file cdate & time</i> reported
in the output  is the date and time of the metadata change of the file (not the creation time
of the file).  This behavior is different in Windows, where the <i>file cdate & time</i> reported 
in the output is the date and time of the creation of the file.</p>

<p>For the <font color="red">-rawscan</font> option as well as the 
<font color="red">-partition</font> option, the algorithm used to carve
LNK files is to analyze file headers looking at sector boundaries.  While this works most
of the time, there are cases, where LNK file data is embedded into the <i>File Record</i>
storing the attributes.  This results in the LNK header data not residing on a sector
boundary. For these cases. the <font color="red">-rawscan</font> option will not find them.</p>

<p>(Windows only) When processing filenames with characters that are not ascii, one option 
is to change the code page of the command window from the default code page to UTF-8.  This
can be done via the command: <pre>chcp 65001</pre></p>
</div>



<hr/><!---------------------List of options---------------------->
<h2><a name="options">List of options</a>
<font size="2"><a href="#index"> (top) </a></font></h2>

<div>
<table border="1" cellpadding="2" cellspacing="0">
    <tr bgcolor="yellow">
        <th>Option</th>
        <th>Extra</th>
        <th>Description</th>
    </tr>
    <tr>
        <td>-csv</td>
        <td></td>
        <td>Outputs the data fields delimited by commas. Since filenames can have commas, to ensure 
        the fields are uniquely separated, any commas in the filenames get converted to spaces.</td>
    </tr>

    <tr>
        <td>-csvl2t</td>
        <td></td>
        <td>Outputs the data fields in accordance with the log2timeline format.</td>
    </tr>
    <tr>
        <td>-bodyfile</td>
        <td></td>
        <td>Outputs the data fields in accordance with the 'body-file' version3 specified in 
        the SleuthKit. The date/timestamp outputted to the body-file are in terms of UTC.  
        So if using the body-file in conjunction with the mactime.pl utility, one needs to set 
        the environment variable TZ=UTC.</td>
    </tr>
    <tr>
        <td>-base10</td>
        <td></td>
        <td>Ensure all size/address output is displayed in base-10 format vice hexadecimal format. Default
        is hexadecimal format</td>
    </tr>
    <tr>
        <td>-username</td>
        <td></td>
        <td>Option is used to populate the output records with
        a specified username. The syntax is <font color="red"><i><b>-username 
		&lt;name to use&gt;</b>. </td>
    </tr>
    <tr>
        <td>-hostname</td>
        <td></td>
        <td>Option is used to populate the output records with a specified hostname. The syntax
		is <font color="red"><i><b>-hostname &lt;name to use&gt;</b></i></font>. </td>
    </tr>
    <tr>
        <td>-pipe</td>
        <td></td>
        <td>Used to pipe files into the tool via STDIN (standard input).  Each file passed
        in is parsed in sequence.</td>
    </tr>
    <tr>
        <td>-rawscan</td>
        <td>**</td>
        <td>Scan a large file or captured image looking for <i>SHLLINK</i> signatures and when found 
        parse them.  This option is not meant to be used for individual <i>shortcut</i> files</td>
    </tr>
    <tr>
        <td>-deepscan</td>
        <td>**</td>
        <td>Added just for Destinations files used for <i>Jump Lists</i>.  Since Destinations can have 
        many <i>SHLLINK</i> signatures embedded into one file, this option handles parsing these types 
        of files correctly.  Note: the <b>-deepscan</b> option and the <b>-rawscan</b> option cannot 
        be used together.</td>
    </tr>
    <tr>
        <td>-partition</td>
        <td>**</td>
        <td>Used to scan a mounted Windows volume for <i>SHLLINK</i> 
        signatures and parse them.  When this option in invoked, the option <b>-rawscan</b> 
        is implicitly invoked.  Since this option is traversing  a mounted volume at the cluster level, 
        it requires the tool to be running at administrative privileges.
		The syntax is <font color="red"><i><b>-partition &lt;drive letter&gt;</b></i></font>.</td>
    </tr>
    <tr>
        <td>-vmdk</td>
        <td>**</td>
        <td> Extract artifacts from a VMWare monolithic NTFS formatted volume. The syntax is 
        <font color="red"><i><b>-vmdk "disk"</b></i></font>.  When this option in invoked, the 
		<b>-rawscan</b> option is  implicitly invoked.  For a collection
        of VMWare disks that include snapshots, one can use the following syntax: 
         <font color="red"><i><b>-vmdk "disk1 | disk2 | ..."</b></i></font></td>
    </tr>
    <tr>
        <td>-no_whitespace</td>
        <td>**</td>
        <td>Used in conjunction with <font color="red"><i><b>-csv</b></i></font> option 
        to remove any whitespace between the field  value and the CSV separator.</td>
    </tr>
    <tr>
        <td>-csv_separator</td>
        <td>**</td>
        <td>Used in conjunction with the <font color="red"><i><b>-csv</b></i></font> 
        option, change the CSV separator from the default comma to something else</td>
    </tr>
    <tr>
        <td>-dateformat</td>
        <td>**</td>
        <td>Output the date using the specified format. Default behavior is 
        <font color="red"><i><b>-dateformat "mm/dd/yyyy"</b></i></font>.
        This allows more flexibility to for a desired format.  For example, one 
        can use this to show year first, via 
        <font color="red"><i><b>"yyyy/mm/dd"</b></i></font> or day first, 
        via <font color="red"><i><b>"dd/mm/yyyy"</b></i></font>, or only show 2 
        digit years, via the <font color="red"><i><b>"mm/dd/yy"</b></i></font>. The 
        restriction with this option is the forward slash (/) symbol needs to separate 
        month, day and year and the month is in digit (1-12) form vice abbreviated 
        name form. </td>
    </tr>
    <tr>
        <td>-timeformat</td>
        <td>**</td>
        <td>Output the time using the specified format. Default behavior is 
        <font color="red"><i><b>-timeformat "hh:mm:ss.xxx"</b></i></font>
        One can adjust the format to microseconds, via 
        <font color="red"><i><b>"hh:mm:ss.xxxxxx"</b></i></font> or nanoseconds, 
        via <font color="red"><i><b>"hh:mm:ss.xxxxxxxxx"</b></i></font>, or no fractional seconds, via 
        <font color="red"><i><b>"hh:mm:ss"</b></i></font>. The 
        restrictions with this option is a the colon (:) symbol needs to separate hours, minutes 
        and seconds, a period (.) symbol needs to separate the seconds and fractional seconds, and the 
        repeating symbol 'x' to represent number of fractional seconds. (note: the the fractional 
        seconds applies only to those time formats that have the appropriate precision available. 
        The Windows internal filetime has, for example, 100 nsec unit precision available. 
        The DOS time format and the UNIX 'time_t' format, however, have no fractional seconds). 
        Some of the times represented by for this tool may use a time format without fractional 
        seconds and therefore will not show a greater precision beyond seconds when using this 
        option.</td>
    </tr>
</table>

<p>The options labeled as 'Extra' require a separate license for them to be unlocked.</p>

</div>

<hr/><!---------------------Authentication and License File---------------------->
<h2><a name="auth">Authentication and License File</a>
<font size="2"><a href="#index"> (top) </a></font></h2>

<div>
<p>This tool has authentication built into the binary.  There are two authentication 
mechanisms:  
(a) the digital certificate embedded into the binary and (b) the runtime authentication.   
For the first method, only the Windows and Mac OS-X (if available) versions have been 
signed by an X-509 digital code signing certificate, which is validated by Windows 
(or OS-X) during operation.  If the binary has been tampered with, the digital 
certificate will be invalidated.</p>

<p>For the second (runtime authentication) method, the authentication does two things: 
(a) validates that the tool has a valid license and (b) validates the 
tool's binary has not been corrupted.   The license needs to be in the same directory 
of the tool for it to authenticate.   Furthermore any modification to the license, 
either to its name or contents, will invalidate the license.   The runtime binary 
validation hashes the executable that is running and fails the authentication if it 
detects any modifications. </p>

<h4><i>Limited</i> vice <i>Full</i> in the tool's output banner</h4>

<p>The tools from TZWorks tools will output header information about the tool's version
and whether it is running in <i>limited</i> or <i>full</i> mode.  This is directly related
to what version of a license the tool authenticates with.   The <i>limited</i> keyword 
indicates some functionality of the tool is not available, and the <i>full</i> keyword 
indicates all the functionality is available.  The lacking functionality in the <i>limited</i>
version may mean one or all of the following: (a) certain options may not be available, 
(b) certain data may not be outputted in the parsed results, and (c) the license has a 
finite lifetime before expiring.</p>

</div>


<hr/><!---------------------Version history---------------------->
<h2><a name="version_history">Version history</a>
<font size="2"><a href="#index"> (top) </a></font></h2>

<div>
<ul type="square">
	<li>03/31/2014 - v0.62 - updated scanning for LNK files within Resident data of MFT records
                            (applies to -rawscan option). Fixed boundary condition for foreign 
                            character sets.  Fixed bug in OSX for -rawscan option to handle dd
							type files.</li>
    <li>01/16/2014 - v0.61 - bug fix for boundary condition</li>
    <li>01/02/2014 - v0.60 -  updated the LNK parsing engine to handle additional ItemIDs
                              fixed logic error affecting the output on certain lnk files.
                               fixed bug in output of image scan option.
                               annotated stats modified timestamp to Linux/Mac builds</li>
    <li>11/18/2013 - v0.59 - tweaked authentication options for demo license</li>
    <li>10/09/2013 - v0.58 - modified the CSV output. updated the ShellItem libraries</li>
    <li>08/22/2013 - v0.57 - added new formatting options (see options in readme) 
    and functionality to extract MFT entry from LNK internals (if present)</li>
    <li>07/05/2013 - v0.56 - Updated the authentication routine and other fixes</li>
    <li>04/23/2013 - v0.55 - fixed another boundary condition.</li>
    <li>02/29/2013 - v0.54 - fixed a number of boundary condition bugs.  Most notable was 
    crashing on certain automaticDestination type files.</li>
    <li>11/03/2012 - v0.53 - maintenance update of core libraries w/ bug fixes </li>
    <li>10/30/2012 - v0.52 - fixed bug w/ NTFS inadvertently added in previous version </li>
    <li>09/24/2012 - v0.51 - added hash check to ensure binary integrity.</li>
    <li>07/16/2012 - v0.50 - bugfix on rawscan mode.</li>
    <li>06/26/2012 - v0.49 - added -partition and -vmdk switches to allow 
        scanning of live windows partitions and <i>VMWare</i> monolithic type disks.
        added -deepscan option to allow carving of <i>SHLLINK</i> metadata from files
        that are used to generate Jump Lists.</li>
    <li>04/07/2012 - v0.48 - (a) Fixed CSV bug in output. (b) Added switch [-rawscan], which
    allows any file (including a dd image of a volume) to be scanned and LNK files
    parsed. (c) Added license authentication.  </li>
    <li>03/17/2012 - v0.47 - maintenance updates</li>
    <li>11/10/2011 - v0.46 - fixed bug - handling of boundary condition for malformed data</li>
    <li>08/06/2011 - v0.45 - combined internal and limited codebases. fixed default output
        during piping operation. added more error handling to allow piping of any type of
        file type w/o <b><i>lp</i></b> erroring out.</li>
    <li>07/31/2011 - v0.44 - added error handling for additional boundary conditions.</li>
    <li>05/30/2011 - v0.43 - added 32 and 64 bit versions to the mix</li>
    <li>05/13/2011 - v0.42 - fixed boundary conditions for link files submitted by a 3rd party.</li>
    <li>03/20/2011 - v0.41 - added capability to parse additional types</li>
    <li>03/03/2011 - v0.4a - added checks for malformed data to help parse carved data.</li>
    <li>02/26/2011 - v0.4 - maintenance update</li>
    <li>12/21/2010 - v0.3b - some darwin data does not use 2 GUIDs. Added this to the parsing
        logic.</li>
    <li>12/06/2010 - v0.3a - added base85 decoding of darwin data.</li>
    <li>12/05/2010 - v0.3 - bug fixes. also changed the [-m] option to [-csv] to be consistent
        with other tools. Incorporated more info in the csv format.</li>
    <li>11/30/2010 - v0.2 - ported over to linux and Mac OS-X</li>
    <li>11/23/2010 - v0.1 - 1st prototype released for testing purposes</li>
</ul>
</div>

<hr/><!---------------------References---------------------->
<h2><a name="references">References</a>
<font size="2"><a href="#index"> (top) </a></font></h2>

<div>
<ol>
    <li>SANS Institute.  Forensics 408 course (taken in Jan 2010).  Image of Windows 8 
	exemplar provided in Nov 2013 [special thanks to Rob Lee].</li>
    <li>[MS-SHLLINK]: Shell Link (.LNK) Binary File Format, 11/12/2010, 
    sourced from Microsoft Corporation. http://msdn.microsoft.com/en-us/library/dd871305(v=prot.13).aspx </li>
    <li>Jesse Hager "The Windows Shortcut File Format", Available at 
    http://www.i2slab.com/Papers/The_Windows_Shortcut_File_Format.pdf.</li>
    <li>http://www.forensicswiki.org/wiki/LNK</li>
    <li>Windows 7 Jump Lists, windows7forensics-jumplists-rv3-public-110606164708-phpapp01.pptx, Troy Larson PowerPoint charts.</li>
    <li>SleuthKit Body-file format, http://wki.sleuthkit.org</li>
    <li>Log2timeline CSV format, http://log2timeline.net/</li>
    <li><i>VMWare</i> Virtual Disk Format 1.1 Technical Note, www.vmware.com</li>
    <li>SHITEMID structure. http://msdn.microsoft.com/en-us/library/windows/desktop/bb759800(v=vs.85).aspx </li>
    <li>RFC 4122, A Universally Unique Identifier (UUID) URN Namespace, published July 2005.</li>
</ol>
</div>

<hr/><!---------------------Copyright---------------------->
<h5 align="right">Copyright &copy; TZWorks, LLC, All Rights Reserved <br />
Contact Info: <a href="mailto:info@tzworks.net">info&#64;tzworks.net</a></h5>

<p></p>
<hr />
<p></p>
</body>

</html>

